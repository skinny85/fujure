entrypoints FileContents ;

FileInNamedPackage   . FileContents ::= "package" PkgName Imports Defs ;
FileInDefaultPackage . FileContents ::= Imports Defs ;

PackageName . PkgName ::= [PkgFragm] ;
separator nonempty PkgFragm "." ;
PackageFragment . PkgFragm ::= JID ;

ImportStmts . Imports ::= [Import] ;
separator Import "" ;
ImportStmt . Import ::= "import" [ImportFragm] ;
separator nonempty ImportFragm "." ;
ImportFragment . ImportFragm ::= JID ;

Definitions . Defs ::= [Def] ;
separator Def "" ;
SimpleValueDef . Def ::= "def" Binding ;

OnlyNameBinding . Binding ::= JID ;
NameTypeBinding . Binding ::= JID ":" TypeSpec ;
NameInitBinding . Binding ::= JID "=" Expr ;
FullBinding     . Binding ::= JID ":" TypeSpec "=" Expr ;

TypeSpecifier . TypeSpec ::= [TypeSpecFragm] ;
separator nonempty TypeSpecFragm "." ;
TypeSpecFragment . TypeSpecFragm ::= JID ;

OrExpr             . Expr   ::= Expr "||" Expr1 ;
AndExpr            . Expr1  ::= Expr1 "&&" Expr2 ;
LesserExpr         . Expr2  ::= Expr2 "<" Expr3 ;
LesserEqualExpr    . Expr2  ::= Expr2 "<=" Expr3 ;
GreaterExpr        . Expr2  ::= Expr2 ">" Expr3 ;
GreaterEqualExpr   . Expr2  ::= Expr2 ">=" Expr3 ;
AdditionExpr       . Expr3  ::= Expr3 "+" Expr4 ;
SubtractionExpr    . Expr3  ::= Expr3 "-" Expr4 ;
MultiplicationExpr . Expr4  ::= Expr4 "*" Expr5 ;
DivisionExpr       . Expr4  ::= Expr4 "/" Expr5 ;
ModuloExpr     	   . Expr4  ::= Expr4 "%" Expr5 ;
NotExpr            . Expr5  ::= "!" Expr5 ;
VariableExpr       . Expr5  ::= ValRef ;
LiteralExpr        . Expr5  ::= Literal ;
coercions Expr 5 ;

ValueRef . ValRef ::= [ValRefFragm] ;
separator nonempty ValRefFragm "." ;
ValueRefFragment . ValRefFragm ::= JID ;

IntLiteral        . Literal ::= Integer ;
UnitLiteral       . Literal ::= "unit" ;
BoolTrueLiteral   . Literal ::= "true" ;
BoolFalseLiteral  . Literal ::= "false" ;
CharLiteral       . Literal ::= JCHAR ;
StringLiteral     . Literal ::= JSTRING ;

token JID ('_' | '$' | letter) ('_' | '$' | letter | digit)* ;

token JCHAR '\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'' ;

token JSTRING '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;

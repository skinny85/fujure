entrypoints FileContents ;

FileInNamedPackage   . FileContents ::= "package" PkgName Imports Defs ;
FileInDefaultPackage . FileContents ::= Imports Defs ;

PackageName . PkgName ::= [PkgFragm] ;
separator nonempty PkgFragm "." ;
PackageFragment . PkgFragm ::= JID ;

ImportStmts . Imports ::= [Import] ;
separator Import "" ;
ImportStmt . Import ::= "import" [ImportFragm] ;
separator nonempty ImportFragm "." ;
ImportFragment . ImportFragm ::= JID ;

DefListDefs . Defs ::= [Def] ;
separator Def "" ;
SimpleValueDef   . Def ::= "def" Binding ;
FunctionValueDef . Def ::= "def" FuncDecl ;

AbstractTypelessFuncDecl . FuncDecl ::= JID "(" [Param] ")" ;
AbstractTypedFuncDecl    . FuncDecl ::= JID "(" [Param] ")" ":" TypeDesc ;
ConcreteTypelessFuncDecl . FuncDecl ::= JID "(" [Param] ")" "=" Expr ;
ConcreteTypedFuncDecl    . FuncDecl ::= JID "(" [Param] ")" ":" TypeDesc "=" Expr ;
separator Param "," ;
BindingParam . Param ::= Binding ;

OnlyNameBinding . Binding ::= JID ;
NameTypeBinding . Binding ::= JID ":" TypeDesc ;
NameInitBinding . Binding ::= JID "=" Expr ;
FullBinding     . Binding ::= JID ":" TypeDesc "=" Expr ;

SimpleTypeDesc              . TypeDesc        ::= SimpleType ;
FuncTypeDesc                . TypeDesc        ::= FuncType ;
ZeroArgFuncType             . FuncType        ::= "(" ")" "->" FuncTypeFragm ;
MultiArgFuncType            . FuncType        ::= FuncTypeFragm "->" [FuncTypeFragm] ;
separator nonempty FuncTypeFragm "->" ;
SimpleFuncTypeFragm         . FuncTypeFragm   ::= SimpleType ;
FuncFuncTypeFragm           . FuncTypeFragm   ::= "(" FuncType ")" ;
FragmSimpleType             . SimpleType      ::= [SimpleTypeFragm] ;
separator nonempty SimpleTypeFragm "." ;
IdSimpleTypeFragm           . SimpleTypeFragm ::= JID ;

IfExpr             . Expr   ::= "if" Expr "then" Expr "else" Expr ;
LetExpr            . Expr   ::= "let" [LetDef] "in" Expr ;
LetDefinition . LetDef ::= Binding ;
separator nonempty LetDef "," ;
OrExpr             . Expr1  ::= Expr1 "||" Expr2 ;
AndExpr            . Expr2  ::= Expr2 "&&" Expr3 ;
EqualityExpr       . Expr3  ::= Expr3 "==" Expr4 ;
InequalityExpr     . Expr3  ::= Expr3 "!=" Expr4 ;
LesserExpr         . Expr4  ::= Expr4 "<"  Expr5 ;
LesserEqualExpr    . Expr4  ::= Expr4 "<=" Expr5 ;
GreaterExpr        . Expr4  ::= Expr4 ">"  Expr5 ;
GreaterEqualExpr   . Expr4  ::= Expr4 ">=" Expr5 ;
AdditionExpr       . Expr5  ::= Expr5 "+"  Expr6 ;
SubtractionExpr    . Expr5  ::= Expr5 "-"  Expr6 ;
MultiplicationExpr . Expr6  ::= Expr6 "*"  Expr7 ;
DivisionExpr       . Expr6  ::= Expr6 "/"  Expr7 ;
ModuloExpr     	   . Expr6  ::= Expr6 "%"  Expr7 ;
NotExpr            . Expr7  ::= "!" Expr8 ;
NegateExpr         . Expr7  ::= "-" Expr8 ;
PositateExpr       . Expr7  ::= "+" Expr8 ;
LiteralExpr        . Expr8  ::= Literal ;
VariableExpr       . Expr8  ::= ValRef ;
FunCallExpr        . Expr8  ::= ValRef "(" [CallArg] ")" ;
ExprCallArg . CallArg ::= Expr ;
separator CallArg "," ;
coercions Expr 8 ;

ValueRef . ValRef ::= [ValRefFragm] ;
separator nonempty ValRefFragm "." ;
ValueRefFragment . ValRefFragm ::= JID ;

IntLiteral        . Literal ::= Integer ;
UnitLiteral       . Literal ::= "unit" ;
BoolTrueLiteral   . Literal ::= "true" ;
BoolFalseLiteral  . Literal ::= "false" ;
CharLiteral       . Literal ::= JCHAR ;
StringLiteral     . Literal ::= JSTRING ;

token JID ('_' | '$' | letter) ('_' | '$' | letter | digit)* ;

token JCHAR '\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'' ;

token JSTRING '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"' ;

package org.fujure.truffle;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.interop.MessageResolution;
import com.oracle.truffle.api.interop.Resolve;
import com.oracle.truffle.api.interop.TruffleObject;
import com.oracle.truffle.api.interop.UnknownIdentifierException;
import com.oracle.truffle.api.nodes.Node;
import org.fujure.fbc.parse.ParsedFile;

import java.util.Collection;
import java.util.Iterator;

// The <ClassName>Foreign classes used in this code are autogenerated
// using Truffle's annotation processor.
public final class FujureTruffleBindingsWrapper implements TruffleObject {
    public static boolean isInstance(TruffleObject obj) {
        return obj instanceof FujureTruffleBindingsWrapper;
    }

    private final FujureTruffleBindings bindings = new FujureTruffleBindings();

    public void register(ParsedFile parsedFile) {
        bindings.register(parsedFile);
    }

    @Override
    public ForeignAccess getForeignAccess() {
        return FujureTruffleBindingsWrapperMessageResolutionForeign.ACCESS;
    }

    @MessageResolution(receiverType = FujureTruffleBindingsWrapper.class)
    static final class FujureTruffleBindingsWrapperMessageResolution {
        @Resolve(message = "KEYS")
        abstract static class KeysNode extends Node {
            @CompilerDirectives.TruffleBoundary
            public Object access(FujureTruffleBindingsWrapper fujureTruffleBindingsWrapper) {
                return new MemberKeys(fujureTruffleBindingsWrapper.bindings.fileNames());
            }
        }

        @Resolve(message = "READ")
        abstract static class ReadNode extends Node {
            @CompilerDirectives.TruffleBoundary
            public Object access(FujureTruffleBindingsWrapper fujureTruffleBindingsWrapper, String name) {
                FujureTruffleFileBindings fileBindings = fujureTruffleBindingsWrapper.bindings.bindingsFor(name);
                if (fileBindings == null)
                    throw UnknownIdentifierException.raise(name);
                return new FujureTruffleFileBindingsWrapper(fileBindings);
            }
        }

        static final class FujureTruffleFileBindingsWrapper implements TruffleObject {
            private final FujureTruffleFileBindings fileBindings;

            public static boolean isInstance(TruffleObject obj) {
                return obj instanceof FujureTruffleFileBindingsWrapper;
            }

            public FujureTruffleFileBindingsWrapper(FujureTruffleFileBindings fileBindings) {
                this.fileBindings = fileBindings;
            }

            @Override
            public ForeignAccess getForeignAccess() {
                return FujureTruffleFileBindingsWrapperMessageResolutionForeign.ACCESS;
            }

            @MessageResolution(receiverType = FujureTruffleFileBindingsWrapper.class)
            static final class FujureTruffleFileBindingsWrapperMessageResolution {
                @Resolve(message = "KEYS")
                abstract static class KeysNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(FujureTruffleFileBindingsWrapper fujureTruffleFileBindingsWrapper) {
                        return new MemberKeys(fujureTruffleFileBindingsWrapper.fileBindings.bindingNames());
                    }
                }

                @Resolve(message = "READ")
                abstract static class ReadNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(FujureTruffleFileBindingsWrapper fujureTruffleFileBindingsWrapper, String name) {
                        Object value = fujureTruffleFileBindingsWrapper.fileBindings.evalBinding(name);
                        if (value == null)
                            throw UnknownIdentifierException.raise(name);
                        return value;
                    }
                }
            }
        }

        static final class MemberKeys implements TruffleObject {
            public static boolean isInstance(TruffleObject obj) {
                return obj instanceof MemberKeys;
            }

            private final Collection<String> keys;

            public MemberKeys(Collection<String> keys) {
                this.keys = keys;
            }

            @Override
            public ForeignAccess getForeignAccess() {
                return MemberKeysMessageResolutionForeign.ACCESS;
            }

            @MessageResolution(receiverType = MemberKeys.class)
            static final class MemberKeysMessageResolution {
                @Resolve(message = "GET_SIZE")
                abstract static class GetSizeNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(MemberKeys memberKeys) {
                        return memberKeys.keys.size();
                    }
                }

                @Resolve(message = "READ")
                abstract static class ReadNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(MemberKeys memberKeys, int index) {
                        if (index >= memberKeys.keys.size()) {
                            throw UnknownIdentifierException.raise(Integer.toString(index));
                        }
                        Iterator<String> iterator = memberKeys.keys.iterator();
                        int i = index;
                        while (i-- > 0) {
                            iterator.next();
                        }
                        return iterator.next();
                    }
                }
            }
        }
    }
}

package org.fujure.truffle;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.interop.MessageResolution;
import com.oracle.truffle.api.interop.Resolve;
import com.oracle.truffle.api.interop.TruffleObject;
import com.oracle.truffle.api.interop.UnknownIdentifierException;
import com.oracle.truffle.api.nodes.Node;

import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

// The <ClassName>Foreign classes used in this code are autogenerated
// using Truffle's annotation processor.
public class FujureTruffleBindings implements TruffleObject {
    public static boolean isInstance(TruffleObject obj) {
        return obj instanceof FujureTruffleBindings;
    }

    private final Set<String> keys = new HashSet<>();

    public void register(String id) {
        keys.add(id);
    }

    @Override
    public ForeignAccess getForeignAccess() {
        return FujureTruffleBindingsMessageResolutionForeign.ACCESS;
    }

    @MessageResolution(receiverType = FujureTruffleBindings.class)
    static final class FujureTruffleBindingsMessageResolution {
        @Resolve(message = "KEYS")
        abstract static class KeysNode extends Node {
            @CompilerDirectives.TruffleBoundary
            public Object access(FujureTruffleBindings fujureTruffleBindings) {
                return new KeysObject(Collections.unmodifiableSet(fujureTruffleBindings.keys));
            }
        }

        static final class KeysObject implements TruffleObject {
            public static boolean isInstance(TruffleObject obj) {
                return obj instanceof KeysObject;
            }

            private final Set<String> keys;

            public KeysObject(Set<String> keys) {
                this.keys = keys;
            }

            @Override
            public ForeignAccess getForeignAccess() {
                return FujureTruffleBindingsKeysObjectMessageResolutionForeign.ACCESS;
            }

            @MessageResolution(receiverType = KeysObject.class)
            static final class FujureTruffleBindingsKeysObjectMessageResolution {
                @Resolve(message = "GET_SIZE")
                abstract static class KeysNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(KeysObject keysObject) {
                        return keysObject.keys.size();
                    }
                }

                @Resolve(message = "READ")
                abstract static class ReadNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(KeysObject keysObject, int index) {
                        if (index >= keysObject.keys.size()) {
                            throw UnknownIdentifierException.raise(Integer.toString(index));
                        }
                        Iterator<String> iterator = keysObject.keys.iterator();
                        int i = index;
                        while (i-- > 0) {
                            iterator.next();
                        }
                        return iterator.next();
                    }
                }
            }
        }
    }
}

package org.fujure.truffle;

import com.oracle.truffle.api.CompilerDirectives;
import com.oracle.truffle.api.interop.ForeignAccess;
import com.oracle.truffle.api.interop.MessageResolution;
import com.oracle.truffle.api.interop.Resolve;
import com.oracle.truffle.api.interop.TruffleObject;
import com.oracle.truffle.api.interop.UnknownIdentifierException;
import com.oracle.truffle.api.nodes.Node;
import org.fujure.fbc.ast.Def;
import org.fujure.fbc.parse.ParsedFile;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

// The <ClassName>Foreign classes used in this code are autogenerated
// using Truffle's annotation processor.
public final class FujureTruffleBindings implements TruffleObject {
    public static boolean isInstance(TruffleObject obj) {
        return obj instanceof FujureTruffleBindings;
    }

    private final Map<String, List<String>> keys = new HashMap<>();

    public void register(ParsedFile parsedFile) {
        String moduleName = parsedFile.getInputFile().getModuleName();
        String packageName = parsedFile.getAst().getPackageName();
        String fqn = packageName.isEmpty()
                ? moduleName
                : packageName + "." + moduleName;
        keys.put(
                fqn,
                parsedFile.getAst().getDefs().stream()
                        .map(def -> ((Def.ValueDef.SimpleValueDef) def).getId())
                        .collect(Collectors.toList()));
    }

    @Override
    public ForeignAccess getForeignAccess() {
        return FujureTruffleBindingsMessageResolutionForeign.ACCESS;
    }

    @MessageResolution(receiverType = FujureTruffleBindings.class)
    static final class FujureTruffleBindingsMessageResolution {
        @Resolve(message = "KEYS")
        abstract static class KeysNode extends Node {
            @CompilerDirectives.TruffleBoundary
            public Object access(FujureTruffleBindings fujureTruffleBindings) {
                return new KeysObject(Collections.unmodifiableSet(fujureTruffleBindings.keys.keySet()));
            }
        }

        @Resolve(message = "READ")
        abstract static class ReadNode extends Node {
            @CompilerDirectives.TruffleBoundary
            public Object access(FujureTruffleBindings fujureTruffleBindings, String name) {
                List<String> bindings = fujureTruffleBindings.keys.get(name);
                if (bindings == null)
                    throw UnknownIdentifierException.raise(name);
                return new FujureFileBindings(bindings);
            }
        }

        static final class FujureFileBindings implements TruffleObject {
            private final List<String> bindings;

            public static boolean isInstance(TruffleObject obj) {
                return obj instanceof FujureFileBindings;
            }

            public FujureFileBindings(List<String> bindings) {
                this.bindings = bindings;
            }

            @Override
            public ForeignAccess getForeignAccess() {
                return FujureFileBindingsMessageResolutionForeign.ACCESS;
            }

            @MessageResolution(receiverType = FujureFileBindings.class)
            static final class FujureFileBindingsMessageResolution {
                @Resolve(message = "KEYS")
                abstract static class KeysNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(FujureFileBindings fujureFileBindings) {
                        return new KeysObject(fujureFileBindings.bindings);
                    }
                }
            }
        }

        static final class KeysObject implements TruffleObject {
            public static boolean isInstance(TruffleObject obj) {
                return obj instanceof KeysObject;
            }

            private final Collection<String> keys;

            public KeysObject(Collection<String> keys) {
                this.keys = keys;
            }

            @Override
            public ForeignAccess getForeignAccess() {
                return FujureTruffleBindingsKeysObjectMessageResolutionForeign.ACCESS;
            }

            @MessageResolution(receiverType = KeysObject.class)
            static final class FujureTruffleBindingsKeysObjectMessageResolution {
                @Resolve(message = "GET_SIZE")
                abstract static class GetSizeNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(KeysObject keysObject) {
                        return keysObject.keys.size();
                    }
                }

                @Resolve(message = "READ")
                abstract static class ReadNode extends Node {
                    @CompilerDirectives.TruffleBoundary
                    public Object access(KeysObject keysObject, int index) {
                        if (index >= keysObject.keys.size()) {
                            throw UnknownIdentifierException.raise(Integer.toString(index));
                        }
                        Iterator<String> iterator = keysObject.keys.iterator();
                        int i = index;
                        while (i-- > 0) {
                            iterator.next();
                        }
                        return iterator.next();
                    }
                }
            }
        }
    }
}
